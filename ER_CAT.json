[
  {
    "id": "E_LOCKING",
    "message": "lock acquisition timed out or missing lock manager",
    "entry_point": "apply()",
    "phase": "apply (lock acquisition)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-L3","REQ-L4"],
    "location": "src/api/apply.rs:L63-71:contentReference[oaicite:0]{index=0}, src/api/apply.rs:L83-91:contentReference[oaicite:1]{index=1}",
    "preconditions": "Commit mode with require_lock_manager=true (or allow_unlocked_commit=false) and no LockManager configured, or LockManager.acquire_process_lock() exceeded timeout",
    "facts_emitted": ["apply.attempt (failure)"],
    "policy_toggles": ["require_lock_manager","allow_unlocked_commit"],
    "maps_to_error_id": "E_LOCKING",
    "exit_code": 30,
    "taxonomy": "locking"
  },
  {
    "id": "E_POLICY",
    "message": "policy gating error or backup-sidecar write failure",
    "entry_point": "apply()",
    "phase": "apply (preflight gating or action execution)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-C2"],
    "location": "src/api/apply.rs:L118-127:contentReference[oaicite:2]{index=2} (policy gating), src/api/apply/handlers.rs:L58-66:contentReference[oaicite:3]{index=3} (sidecar failure)",
    "preconditions": "override_preflight=false in Commit mode and preflight-gating detects violations (untrusted source, immutable target, etc.), or `fs::replace_file_with_symlink` fails writing backup sidecar",
    "facts_emitted": ["apply.result (failure) with error_id=E_POLICY"],
    "policy_toggles": ["override_preflight"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "conservatism"
  },
  {
    "id": "E_EXDEV",
    "message": "cross-filesystem symlink swap failed without degraded fallback",
    "entry_point": "apply()",
    "phase": "apply (action execution)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-F1","REQ-F2"],
    "location": "src/api/apply/handlers.rs:L58-66:contentReference[oaicite:4]{index=4}",
    "preconditions": "Action is EnsureSymlink, underlying `replace_file_with_symlink` returns EXDEV, and policy.allow_degraded_fs=false",
    "facts_emitted": ["apply.result (failure) with error_id=E_EXDEV"],
    "policy_toggles": ["allow_degraded_fs"],
    "maps_to_error_id": "E_EXDEV",
    "exit_code": 50,
    "taxonomy": "filesystem"
  },
  {
    "id": "E_ATOMIC_SWAP",
    "message": "atomic symlink swap failed",
    "entry_point": "apply()",
    "phase": "apply (action execution)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-A1","REQ-A2"],
    "location": "src/api/apply/handlers.rs:L58-66:contentReference[oaicite:5]{index=5}",
    "preconditions": "Unexpected IO error during atomic replace (not EXDEV and not sidecar error)",
    "facts_emitted": ["apply.result (failure) with error_id=E_ATOMIC_SWAP"],
    "policy_toggles": [],
    "maps_to_error_id": "E_ATOMIC_SWAP",
    "exit_code": 40,
    "taxonomy": "atomicity"
  },
  {
    "id": "E_BACKUP_MISSING",
    "message": "no backup artifacts found for restore",
    "entry_point": "apply()",
    "phase": "apply (action execution)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-R1","REQ-R2"],
    "location": "src/api/apply/handlers.rs:L139-147:contentReference[oaicite:6]{index=6}",
    "preconditions": "Action is RestoreFromBackup, no sidecar or payload exists at target, and force_restore_best_effort=false",
    "facts_emitted": ["apply.result (failure) with error_id=E_BACKUP_MISSING"],
    "policy_toggles": ["force_restore_best_effort"],
    "maps_to_error_id": "E_BACKUP_MISSING",
    "exit_code": 60,
    "taxonomy": "rollback"
  },
  {
    "id": "E_RESTORE_FAILED",
    "message": "file restore from backup failed",
    "entry_point": "apply()",
    "phase": "apply (action execution)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-R1"],
    "location": "src/api/apply/handlers.rs:L139-147:contentReference[oaicite:7]{index=7}",
    "preconditions": "Action is RestoreFromBackup, `fs::restore_file` returned an IO error other than NotFound",
    "facts_emitted": ["apply.result (failure) with error_id=E_RESTORE_FAILED"],
    "policy_toggles": ["force_restore_best_effort"],
    "taxonomy": "rollback"
  },
  {
    "id": "E_SMOKE",
    "message": "post-apply smoke test failed or runner missing",
    "entry_point": "apply()",
    "phase": "apply (post-action smoke)",
    "decision_type": "rollback_triggered",
    "spec_refs": ["REQ-H2","REQ-H3"],
    "location": "src/api/apply.rs:L195-204:contentReference[oaicite:8]{index=8}, L225-234:contentReference[oaicite:9]{index=9}",
    "preconditions": "Completed all actions successfully (Commit mode), then either smoke.run() returned Err, or require_smoke_in_commit=true and no SmokeTestRunner configured",
    "facts_emitted": ["apply.result (failure) with error_id=E_SMOKE"],
    "policy_toggles": ["require_smoke_in_commit","disable_auto_rollback"],
    "maps_to_error_id": "E_SMOKE",
    "exit_code": 80,
    "taxonomy": "health"
  },
  {
    "id": "RESCUE_PROFILE_UNAVAILABLE",
    "message": "rescue profile unavailable",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (global rescue check)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-RC2","REQ-RC3"],
    "location": "src/api/preflight.rs:L33-40:contentReference[oaicite:10]{index=10}, apply/gating.rs:L11-19:contentReference[oaicite:11]{index=11}",
    "preconditions": "policy.require_rescue=true and rescue toolset verification fails (insufficient BusyBox/coreutils)",
    "facts_emitted": ["preflight.summary (failure)"],
    "policy_toggles": ["require_rescue","rescue_exec_check"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "rescue"
  },
  {
    "id": "MOUNT_NOT_RW_EXEC",
    "message": "/usr or target mount is not RW+exec",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (mount check)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-S2"],
    "location": "src/api/preflight.rs:L47-56:contentReference[oaicite:12]{index=12}, apply/gating.rs:L23-33:contentReference[oaicite:13]{index=13}",
    "preconditions": "Filesystem containing \"/usr\" or the target path is read-only or noexec",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": [],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "IMMUTABLE_TARGET",
    "message": "target has immutable flag set",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (immutable check)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-S2"],
    "location": "src/api/preflight.rs:L59-66:contentReference[oaicite:14]{index=14}, apply/gating.rs:L33-40:contentReference[oaicite:15]{index=15}",
    "preconditions": "`preflight::check_immutable(target)` returns Err (immutable bit or similar)",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": [],
    "taxonomy": "safety"
  },
  {
    "id": "UNTRUSTED_SOURCE",
    "message": "untrusted source file",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (ownership check)",
    "decision_type": "hard_fail / warning_only",
    "spec_refs": ["REQ-S3"],
    "location": "src/api/preflight.rs:L67-75:contentReference[oaicite:16]{index=16}, apply/gating.rs:L41-49:contentReference[oaicite:17]{index=17}",
    "preconditions": "source is world-writable or not root-owned; policy.force_untrusted_source=false (stop) or true (warn)",
    "facts_emitted": ["preflight.row (failure or warning)"],
    "policy_toggles": ["force_untrusted_source"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "STRICT_OWNERSHIP_FAILED",
    "message": "strict ownership check failed",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (ownership oracle)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-S4"],
    "location": "src/api/preflight.rs:L81-89:contentReference[oaicite:18]{index=18}, apply/gating.rs:L51-59:contentReference[oaicite:19]{index=19}",
    "preconditions": "policy.strict_ownership=true, OwnershipOracle present, but oracle.owner_of(target) returns Err",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["strict_ownership"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "OWNERSHIP_ORACLE_MISSING",
    "message": "OwnershipOracle not configured for strict ownership",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (ownership oracle)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-S4"],
    "location": "src/api/preflight.rs:L90-96:contentReference[oaicite:20]{index=20}, apply/gating.rs:L58-62:contentReference[oaicite:21]{index=21}",
    "preconditions": "policy.strict_ownership=true but no OwnershipOracle provided",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["strict_ownership"],
    "taxonomy": "safety"
  },
  {
    "id": "TARGET_OUTSIDE_ALLOWED_ROOTS",
    "message": "target path outside allowed roots",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (path scope)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-API1"],
    "location": "src/api/preflight.rs:L98-111:contentReference[oaicite:22]{index=22}, apply/gating.rs:L65-74:contentReference[oaicite:23]{index=23}",
    "preconditions": "policy.allow_roots not empty, and target path does not start with any allowed prefix",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["allow_roots"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "TARGET_IN_FORBIDDEN_PATH",
    "message": "target path in forbidden list",
    "entry_point": "preflight() / apply() gating",
    "phase": "preflight (path scope)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-API1"],
    "location": "src/api/preflight.rs:L113-124:contentReference[oaicite:24]{index=24}, apply/gating.rs:L79-88:contentReference[oaicite:25]{index=25}",
    "preconditions": "target path starts with one of policy.forbid_paths prefixes",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["forbid_paths"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "PRESERVATION_UNSUPPORTED",
    "message": "filesystem preservation unsupported for target",
    "entry_point": "preflight()",
    "phase": "preflight (capability probe)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-S5"],
    "location": "src/api/preflight.rs:L133-136:contentReference[oaicite:26]{index=26}",
    "preconditions": "policy.require_preservation=true and `detect_preservation_capabilities(target)` returns supported=false",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["require_preservation"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "safety"
  },
  {
    "id": "NO_BACKUP_ARTIFACTS",
    "message": "restore requested but no backup artifacts present",
    "entry_point": "preflight()",
    "phase": "preflight (rescue check)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-RC2"],
    "location": "src/api/preflight.rs:L208-212:contentReference[oaicite:27]{index=27}",
    "preconditions": "policy.require_rescue=true and policy.force_restore_best_effort=false, but fs::has_backup_artifacts(target) is false",
    "facts_emitted": ["preflight.row (failure)"],
    "policy_toggles": ["require_rescue","force_restore_best_effort"],
    "maps_to_error_id": "E_POLICY",
    "exit_code": 10,
    "taxonomy": "rescue"
  },
  {
    "id": "UNTRUSTED_SOURCE_ALLOWED",
    "message": "untrusted source allowed by policy (warning)",
    "entry_point": "preflight()",
    "phase": "preflight (ownership check)",
    "decision_type": "warning_only",
    "spec_refs": ["REQ-S3"],
    "location": "src/api/preflight.rs:L72-79:contentReference[oaicite:28]{index=28}",
    "preconditions": "policy.force_untrusted_source=true and check_source_trust returned Err",
    "facts_emitted": ["preflight.row (success with note)"],
    "policy_toggles": ["force_untrusted_source"],
    "taxonomy": "safety"
  },
  {
    "id": "NO_LOCK_MANAGER_WARN",
    "message": "no LockManager configured (warning)",
    "entry_point": "apply()",
    "phase": "apply (lock acquisition)",
    "decision_type": "warning_only",
    "spec_refs": ["REQ-L2"],
    "location": "src/api/apply.rs:L100-110:contentReference[oaicite:29]{index=29}",
    "preconditions": "DryRun mode or (Commit mode and policy.allow_unlocked_commit=true and require_lock_manager=false) with no LockManager",
    "facts_emitted": ["apply.attempt (warn)"],
    "policy_toggles": ["allow_unlocked_commit","require_lock_manager"],
    "maps_to_error_id": null,
    "exit_code": null,
    "taxonomy": "locking"
  },
  {
    "id": "NO_LOCK_MANAGER_COMMIT",
    "message": "commit without LockManager is unsupported (E_LOCKING)",
    "entry_point": "apply()",
    "phase": "apply (lock acquisition)",
    "decision_type": "hard_fail",
    "spec_refs": ["REQ-L4"],
    "location": "src/api/apply.rs:L84-91:contentReference[oaicite:30]{index=30}",
    "preconditions": "Commit mode, policy.require_lock_manager=true or allow_unlocked_commit=false, and no LockManager",
    "facts_emitted": ["apply.attempt (failure)"],
    "policy_toggles": ["require_lock_manager","allow_unlocked_commit"],
    "maps_to_error_id": "E_LOCKING",
    "exit_code": 30,
    "taxonomy": "locking"
  }
]
