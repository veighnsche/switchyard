name: Lint

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Format check
        run: cargo fmt -- --check
      - name: Clippy (warnings as errors)
        run: cargo clippy --lib --bins -- -D warnings

      - name: Guardrails (switchyard crate)
        working-directory: .
        run: |
          set -euo pipefail
          echo "Checking no #[path] under src/api/"
          if grep -R --line-number "#[path]" src/api; then
            echo "ERROR: #[path] found under src/api" >&2
            exit 1
          fi

          echo "Checking no deprecated adapters::lock_file shim"
          if grep -R --line-number "adapters::lock_file::" src tests; then
            echo "ERROR: adapters::lock_file:: usage found" >&2
            exit 1
          fi

          echo "Checking no legacy audit::emit_* calls outside src/logging/"
          if grep -R --line-number "audit::emit_" src | grep -v "^src/logging/"; then
            echo "ERROR: legacy audit::emit_* used outside src/logging/" >&2
            exit 1
          fi

          echo "Checking no direct FactsEmitter::emit outside src/logging/"
          if grep -R --line-number "FactsEmitter::emit" src | grep -v "^src/logging/"; then
            echo "ERROR: direct FactsEmitter::emit used outside src/logging/" >&2
            exit 1
          fi

          echo "Checking no public re-exports of low-level fs atoms"
          if grep -R --line-number -E "^[[:space:]]*pub[[:space:]]+use[[:space:]]+atomic::" src/fs/mod.rs; then
            echo "ERROR: public fs atoms re-exported at src/fs/mod.rs" >&2
            exit 1
          fi

          echo "Checking top-level rescue alias not used by consumers"
          if grep -R --line-number -E "\\buse[[:space:]]+switchyard::rescue\\b" src tests; then
            echo "ERROR: 'use switchyard::rescue' found; import from switchyard::policy::rescue instead" >&2
            exit 1
          fi

          echo "Switchyard guardrails passed"

      - name: Hermetic tests guard (no absolute system paths)
        working-directory: .
        run: |
          set -euo pipefail
          if grep -R --line-number -E '"/(bin|sbin|usr|etc|var|proc|sys|dev|run|tmp)(/|"|$)' tests; then
            echo "ERROR: Absolute system path literal found in tests" >&2
            exit 1
          fi

      - name: Zero-SKIP gate (no #[ignore] tests)
        working-directory: .
        run: |
          set -euo pipefail
          if grep -R --line-number -E '^[[:space:]]*#\[ignore\]' tests; then
            echo "ERROR: #[ignore] present in tests; Zero-SKIP gate requires no skipped tests." >&2
            exit 1
          fi

      - name: Changelog updated for switchyard crate changes
        run: |
          set -euo pipefail
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            changed=$(git diff --name-only HEAD^)
            if echo "$changed" | grep -E '^(src/|Cargo.toml|SPEC/|DOCS/|book/)'; then
              if ! echo "$changed" | grep -q '^CHANGELOG.md$'; then
                echo "ERROR: Detected changes to switchyard crate without updating CHANGELOG.md" >&2
                echo "Changed files:" >&2
                echo "$changed" >&2
                exit 1
              fi
            fi
          fi
